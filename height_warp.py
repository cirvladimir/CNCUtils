import re
from triangle_map import TriangleMap

inFile = open('C:\\Users\\The Russian\\AppData\\Local\\Fusion 360 CAM\\nc\\circuit_contour_v2_0.04mm.nc', 'r')
outFile = open('C:\\Users\\The Russian\\AppData\\Local\\Fusion 360 CAM\\nc\\circuit_contour_v2_0.04mm_z_adjusted.nc', 'w')

# inFile = open('C:\\Users\\The Russian\\AppData\\Local\\Fusion 360 CAM\\nc\\test_square.nc', 'r')
# outFile = open('C:\\Users\\The Russian\\AppData\\Local\\Fusion 360 CAM\\nc\\test_square_z_adjusted.nc', 'w')

# States:
NOT_STARTED = 0
G1_MODE = 1
NON_G1_MODE = 2

state = NOT_STARTED

def updateState(line):
    global state
    if state == NOT_STARTED:
        if re.search("S1000", line):
            state = NON_G1_MODE
        return
    # Started state
    g_command = re.search("G\\w*", line)
    if g_command:
        if g_command[0] == "G1":
            state = G1_MODE
        else:
            state = NON_G1_MODE
    if re.search("G91", line):
        state = NOT_STARTED


t = TriangleMap([
[
[2.000,2.000,-0.028],
[2.000,8.556,-0.011],
[2.000,15.111,-0.025],
[2.000,21.668,-0.028],
[2.000,28.223,-0.041],
[2.000,34.778,-0.061],
[2.000,41.333,-0.068],
[2.000,47.889,-0.068],
[2.000,54.444,-0.051],
[2.000,61.000,-0.051],
],
[
[8.429,2.000,0.009],
[8.429,8.556,-0.011],
[8.429,15.111,-0.031],
[8.429,21.668,-0.041],
[8.429,28.223,-0.061],
[8.429,34.778,-0.071],
[8.429,41.333,-0.071],
[8.429,47.889,-0.058],
[8.429,54.444,-0.031],
[8.429,61.000,-0.021],
],
[
[14.858,2.000,-0.001],
[14.858,8.556,-0.031],
[14.858,15.111,-0.048],
[14.858,21.668,-0.065],
[14.858,28.223,-0.081],
[14.858,34.778,-0.088],
[14.858,41.333,-0.081],
[14.858,47.889,-0.071],
[14.858,54.444,-0.041],
[14.858,61.000,-0.001],
],
[
[21.286,2.000,-0.008],
[21.286,8.556,-0.048],
[21.286,15.111,-0.061],
[21.286,21.668,-0.088],
[21.286,28.223,-0.101],
[21.286,34.778,-0.108],
[21.286,41.333,-0.101],
[21.286,47.889,-0.075],
[21.286,54.444,-0.048],
[21.286,61.000,0.009],
],
[
[27.714,2.000,-0.008],
[27.714,8.556,-0.035],
[27.714,15.111,-0.068],
[27.714,21.668,-0.091],
[27.714,28.223,-0.108],
[27.714,34.778,-0.101],
[27.714,41.333,-0.098],
[27.714,47.889,-0.071],
[27.714,54.444,-0.031],
[27.714,61.000,0.013],
],
[
[34.143,2.000,-0.011],
[34.143,8.556,-0.058],
[34.143,15.111,-0.088],
[34.143,21.668,-0.105],
[34.143,28.223,-0.115],
[34.143,34.778,-0.121],
[34.143,41.333,-0.105],
[34.143,47.889,-0.071],
[34.143,54.444,-0.041],
[34.143,61.000,0.009],
],
[
[40.571,2.000,-0.001],
[40.571,8.556,-0.051],
[40.571,15.111,-0.081],
[40.571,21.668,-0.088],
[40.571,28.223,-0.111],
[40.571,34.778,-0.111],
[40.571,41.333,-0.101],
[40.571,47.889,-0.068],
[40.571,54.444,-0.031],
[40.571,61.000,0.023],
],
[
[47.000,2.000,-0.018],
[47.000,8.556,-0.068],
[47.000,15.111,-0.081],
[47.000,21.668,-0.111],
[47.000,28.223,-0.131],
[47.000,34.778,-0.121],
[47.000,41.333,-0.108],
[47.000,47.889,-0.071],
[47.000,54.444,-0.031],
[47.000,61.000,0.009],
],
[
[53.429,2.000,-0.035],
[53.429,8.556,-0.081],
[53.429,15.111,-0.111],
[53.429,21.668,-0.121],
[53.429,28.223,-0.131],
[53.429,34.778,-0.141],
[53.429,41.333,-0.121],
[53.429,47.889,-0.088],
[53.429,54.444,-0.051],
[53.429,61.000,-0.008],
],
[
[59.858,2.000,-0.048],
[59.858,8.556,-0.081],
[59.858,15.111,-0.111],
[59.858,21.668,-0.141],
[59.858,28.223,-0.131],
[59.858,34.778,-0.131],
[59.858,41.333,-0.125],
[59.858,47.889,-0.088],
[59.858,54.444,-0.061],
[59.858,61.000,-0.011],
],
[
[66.286,2.000,-0.088],
[66.286,8.556,-0.121],
[66.286,15.111,-0.125],
[66.286,21.668,-0.141],
[66.286,28.223,-0.161],
[66.286,34.778,-0.147],
[66.286,41.333,-0.141],
[66.286,47.889,-0.111],
[66.286,54.444,-0.081],
[66.286,61.000,-0.031],
],
[
[72.714,2.000,-0.111],
[72.714,8.556,-0.131],
[72.714,15.111,-0.161],
[72.714,21.668,-0.151],
[72.714,28.223,-0.161],
[72.714,34.778,-0.161],
[72.714,41.333,-0.147],
[72.714,47.889,-0.121],
[72.714,54.444,-0.091],
[72.714,61.000,-0.071],
],
[
[79.143,2.000,-0.151],
[79.143,8.556,-0.161],
[79.143,15.111,-0.151],
[79.143,21.668,-0.168],
[79.143,28.223,-0.168],
[79.143,34.778,-0.171],
[79.143,41.333,-0.151],
[79.143,47.889,-0.141],
[79.143,54.444,-0.111],
[79.143,61.000,-0.091],
],
[
[85.571,2.000,-0.201],
[85.571,8.556,-0.191],
[85.571,15.111,-0.191],
[85.571,21.668,-0.171],
[85.571,28.223,-0.168],
[85.571,34.778,-0.168],
[85.571,41.333,-0.171],
[85.571,47.889,-0.151],
[85.571,54.444,-0.147],
[85.571,61.000,-0.151],
],
[
[92.000,2.000,-0.221],
[92.000,8.556,-0.201],
[92.000,15.111,-0.185],
[92.000,21.668,-0.147],
[92.000,28.223,-0.147],
[92.000,34.778,-0.151],
[92.000,41.333,-0.145],
[92.000,47.889,-0.147],
[92.000,54.444,-0.161],
[92.000,61.000,-0.181],
]
])
# t = TriangleMap([
# [[0.000,0.000,-0.466],[0.000,24.000,-0.874],[0.000,48.000,-1.474]],
# [[26.000,0.000,-1.399],[26.000,24.000,-2.299],[26.000,48.000,-2.941]],
# [[52.000,0.000,-2.841],[52.000,24.000,-3.733],[52.000,48.000,-4.358]],
# [[78.000,0.000,-4.149],[78.000,24.000,-4.966],[78.000,48.000,-5.533]]
# ])

# print(t.getZ(14, 48))
# print(t.getZ(73, 48))
# print(t.getZ(73, 10))
# print(t.getZ(14, 10))

lastX = None
lastY = None
lastZ = None
def handleStartState(line):
    global lastX, lastY, lastZ
    outCmds = []
    hasZ = False
    for cmd in line.strip().split(" "):
        if len(cmd) < 1:
            continue
        if cmd[0] == 'X':
            lastX = float(cmd[1:])
        if cmd[0] == 'Y':
            lastY = float(cmd[1:])
        if cmd[0] == 'Z':
            z = float(cmd[1:])
            lastZ = z
            z += t.getZ(lastX, lastY)
            # print(f"Adjusting z for {lastX} {lastY} to {z}")
            outCmds.append('Z' + "%.3f" % z)
            hasZ = True
        else:
            outCmds.append(cmd)
    if not hasZ and state == G1_MODE:
        outCmds.append('Z' + "%.3f" % (lastZ + t.getZ(lastX, lastY)))
    outFile.write(' '.join(outCmds) + '\n')

def handleNonStartState(line):
    outFile.write(line)

for line in inFile:
    updateState(line)
    if state == NOT_STARTED:
        handleNonStartState(line)
    else:
        handleStartState(line)
